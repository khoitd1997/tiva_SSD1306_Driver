import numpy as np

bitmapData = {
    # Bitmap Data:
	# ': ': [0x00, ],
	# '!': [0xFF, 0x30, ],
	# '"': [0x99, 0x99, ],
	# '#': [0x0C, 0x81, 0x10, 0x26, 0x3F, 0xF1, 0x90, 0x22, 0x04, 0xC7, 0xFE, 0x32, 0x04, 0x40, 0x98, 0x00, ],
	# '$': [0x10, 0x21, 0xF6, 0x99, 0x12, 0x1C, 0x0E, 0x12, 0x26, 0x5B, 0xE1, 0x02, 0x00, ],
	# '%': [0x70, 0x44, 0x42, 0x22, 0x21, 0x13, 0x08, 0x90, 0x39, 0x00, 0x09, 0xC0, 0x91, 0x0C, 0x88, 0x44, 0x44, 0x22, 0x20, 0xE0, ],
	# '&': [0x3C, 0x0C, 0x41, 0x00, 0x20, 0x02, 0x00, 0xA0, 0x22, 0x14, 0x22, 0x82, 0x50, 0x31, 0x06, 0x1F, 0x20, ],
	# ' ': [0xF0, ],
	# '(': [0x36, 0x44, 0x88, 0x88, 0x88, 0x44, 0x63, ],
	# ')': [0xC6, 0x22, 0x11, 0x11, 0x11, 0x22, 0x6C, ],
	# '*': [0x10, 0x22, 0x4B, 0xE3, 0x9A, 0xC4, 0x08, ],
	# '+': [0x08, 0x04, 0x02, 0x01, 0x0F, 0xF8, 0x40, 0x20, 0x10, 0x08, 0x00, ],
	# ',': [0x56, ],
	# '-': [0xF0, ],
	# '.': [0xC0, ],
	# '/': [0x08, 0x44, 0x21, 0x10, 0x84, 0x42, 0x11, 0x88, 0x00, ],
	# '0': [0x3C, 0x42, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x42, 0x3C, ],
	# '1': [0x71, 0xA0, 0x40, 0x81, 0x02, 0x04, 0x08, 0x10, 0x20, 0x47, 0xF0, ],
	# '2': [0x79, 0x8A, 0x08, 0x10, 0x20, 0x82, 0x08, 0x20, 0x82, 0x07, 0xF0, ],
	# '3': [0x7C, 0x83, 0x01, 0x01, 0x03, 0x3C, 0x03, 0x01, 0x01, 0x01, 0x82, 0x7C, ],
	# '4': [0x06, 0x05, 0x02, 0x82, 0x42, 0x22, 0x11, 0x09, 0x04, 0xFF, 0x81, 0x00, 0x80, 0x40, ],
	# '5': [0x7E, 0x40, 0x40, 0x40, 0x7C, 0x42, 0x01, 0x01, 0x01, 0x01, 0x82, 0x7C, ],
	# '6': [0x1C, 0x62, 0x40, 0x80, 0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, ],
	'7': [0xFF, 0x01, 0x02, 0x02, 0x04, 0x04, 0x08, 0x08, 0x08, 0x10, 0x10, 0x20, ],
	# '8': [0x3C, 0xC3, 0x81, 0x81, 0xC3, 0x3C, 0xC3, 0x81, 0x81, 0x81, 0x42, 0x3C, ],
	# '9': [0x3C, 0x42, 0x82, 0x81, 0x81, 0x81, 0x43, 0x3D, 0x01, 0x02, 0x46, 0x38, ],
	# ': ': [0xC3, ],
	# ';': [0x50, 0x05, 0x60, ],
	# '<': [0x00, 0x40, 0xE1, 0xC1, 0xC0, 0x80, 0x1C, 0x01, 0xC0, 0x0E, 0x00, 0x40, ],
	# '=': [0xFF, 0xC0, 0x00, 0x03, 0xFF, ],
	# '>': [0x80, 0x1C, 0x00, 0xE0, 0x0E, 0x00, 0x40, 0xE0, 0xE1, 0xC0, 0x80, 0x00, ],
	# '?': [0x7A, 0x10, 0x41, 0x0C, 0x63, 0x08, 0x20, 0x02, 0x08, ],
	# '@': [0x0F, 0xC0, 0x60, 0xC2, 0x01, 0x91, 0xEA, 0xC8, 0x66, 0x40, 0x99, 0x02, 0x64, 0x09, 0x90, 0x27, 0x21, 0xA4, 0x7B, 0x08, 0x00, 0x18, 0x30, 0x1F, 0x80],
	# 'A': [0x04, 0x00, 0x80, 0x28, 0x05, 0x01, 0x10, 0x22, 0x08, 0x21, 0x04, 0x3F, 0x88, 0x09, 0x01, 0x40, 0x10, ],
	# 'B': [0xFE, 0x40, 0xE0, 0x30, 0x18, 0x1F, 0xFA, 0x07, 0x01, 0x80, 0xC0, 0x60, 0x5F, 0xC0, ],
	# 'C': [0x1F, 0x10, 0xD0, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x80, 0x20, 0x08, 0x63, 0xE0, ],
	# 'D': [0xFE, 0x20, 0xC8, 0x0A, 0x01, 0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x28, 0x33, 0xF8, ],
	# 'E': [0xFF, 0x80, 0x80, 0x80, 0x80, 0xFF, 0x80, 0x80, 0x80, 0x80, 0x80, 0xFF, ],
	# 'F': [0xFF, 0x02, 0x04, 0x08, 0x1F, 0xA0, 0x40, 0x81, 0x02, 0x04, 0x00, ],
	# 'G': [0x1F, 0x88, 0x34, 0x06, 0x00, 0x80, 0x20, 0x08, 0x3E, 0x01, 0x80, 0x50, 0x12, 0x04, 0x7E, ],
	# 'H': [0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x7F, 0xF8, 0x06, 0x01, 0x80, 0x60, 0x18, 0x06, 0x01, ],
	# 'I': [0xFF, 0xF0, ],
	# 'J': [0x24, 0x92, 0x49, 0x24, 0x92, 0x70, ],
	# 'K': [0x81, 0x41, 0x21, 0x11, 0x09, 0x07, 0x02, 0x81, 0x20, 0x88, 0x42, 0x20, 0x90, 0x20, ],
	# 'L': [0x81, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x81, 0x02, 0x07, 0xF0, ],
	# 'M': [0xC0, 0x78, 0x0E, 0x82, 0xD0, 0x5A, 0x0B, 0x22, 0x64, 0x4C, 0x51, 0x8A, 0x30, 0x86, 0x00, 0xC0, 0x10, ],
	# 'N': [0xC0, 0x68, 0x1A, 0x06, 0x41, 0x88, 0x62, 0x18, 0x46, 0x09, 0x82, 0x60, 0x58, 0x16, 0x03, ],
	# 'O': [0x1F, 0x04, 0x11, 0x01, 0x40, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x28, 0x08, 0x82, 0x0F, 0x80, ],
	# 'P': [0xFC, 0x82, 0x81, 0x81, 0x81, 0x82, 0xFC, 0x80, 0x80, 0x80, 0x80, 0x80, ],
	# 'Q': [0x1F, 0x04, 0x11, 0x01, 0x40, 0x18, 0x03, 0x00, 0x60, 0x0C, 0x01, 0x80, 0x28, 0x08, 0x83, 0x0F, 0x80, 0x08, 0x00, 0x80, ],
	# 'R': [0xFC, 0x20, 0x88, 0x12, 0x04, 0x81, 0x20, 0x8F, 0xE2, 0x08, 0x81, 0x20, 0x48, 0x0A, 0x02, ],
	# 'S': [0x3C, 0xC6, 0x80, 0x80, 0x80, 0x70, 0x1E, 0x03, 0x01, 0x81, 0xC3, 0x7C, ],
	# 'T': [0xFF, 0x84, 0x02, 0x01, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, ],
	# 'U': [0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x18, 0x06, 0x01, 0x80, 0x60, 0x14, 0x08, 0xFC, ],
	# 'V': [0x80, 0x30, 0x05, 0x01, 0x20, 0x22, 0x08, 0x41, 0x04, 0x40, 0x88, 0x11, 0x01, 0x40, 0x28, 0x02, 0x00, ],
	# 'W': [0x81, 0x03, 0x02, 0x05, 0x0A, 0x12, 0x14, 0x24, 0x28, 0x44, 0x51, 0x09, 0x12, 0x12, 0x24, 0x14, 0x50, 0x28, 0xA0, 0x20, 0x80, 0x41, 0x00, ],
	# 'X': [0xC1, 0xA0, 0x88, 0x84, 0x41, 0x40, 0x40, 0x20, 0x28, 0x22, 0x11, 0x10, 0x50, 0x10, ],
	# 'Y': [0x80, 0xA0, 0x88, 0x84, 0x41, 0x40, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, ],
	# 'Z': [0xFF, 0xC0, 0x10, 0x08, 0x04, 0x02, 0x01, 0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x03, 0xFF, ],
	# '[': [0xF2, 0x49, 0x24, 0x92, 0x49, 0xC0, ],
	# '\\': [0x86, 0x10, 0x84, 0x10, 0x84, 0x10, 0x84, 0x10, 0x80, ],
	# ']': [0xE4, 0x92, 0x49, 0x24, 0x93, 0xC0, ],
	# '^': [0x0C, 0x07, 0x82, 0x11, 0x02, ],
	# '_': [0xFF, ],
	# '`': [0xC6, 0x30, ],
	# 'a': [0x3C, 0x8C, 0x0B, 0xFC, 0x30, 0x60, 0xE3, 0x7A, ],
	# 'b': [0x80, 0x80, 0x80, 0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x81, 0xC2, 0xBC, ],
	# 'c': [0x3C, 0x86, 0x04, 0x08, 0x10, 0x20, 0x21, 0x3C, ],
	# 'd': [0x01, 0x01, 0x01, 0x3D, 0x43, 0x81, 0x81, 0x81, 0x81, 0x81, 0x43, 0x3D, ],
	# 'e': [0x38, 0x8A, 0x0C, 0x1F, 0xF0, 0x20, 0x21, 0x3C, ],
	# 'f': [0x3A, 0x11, 0xE4, 0x21, 0x08, 0x42, 0x10, 0x80, ],
	# 'g': [0x3D, 0x43, 0x81, 0x81, 0x81, 0x81, 0x81, 0x43, 0x3D, 0x01, 0x42, 0x3C, ],
	# 'h': [0x80, 0x80, 0x80, 0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, ],
	# 'i': [0xDF, 0xF0, ],
	# 'j': [0x24, 0x12, 0x49, 0x24, 0x92, 0x70, ],
	# 'k': [0x80, 0x80, 0x80, 0x82, 0x84, 0x88, 0x90, 0xE0, 0x90, 0x88, 0x84, 0x82, ],
	# 'l': [0xFF, 0xF0, ],
	# 'm': [0xBC, 0xF6, 0x38, 0xE0, 0x83, 0x04, 0x18, 0x20, 0xC1, 0x06, 0x08, 0x30, 0x41, 0x82, 0x08, ],
	# 'n': [0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, ],
	# 'o': [0x3C, 0x42, 0x81, 0x81, 0x81, 0x81, 0x81, 0x42, 0x3C, ],
	# 'p': [0xBC, 0xC2, 0x81, 0x81, 0x81, 0x81, 0x81, 0xC2, 0xBC, 0x80, 0x80, 0x80, ],
	# 'q': [0x3D, 0x43, 0x81, 0x81, 0x81, 0x81, 0x81, 0x43, 0x3D, 0x01, 0x01, 0x01, ],
	# 'r': [0xBE, 0x21, 0x08, 0x42, 0x10, 0x80, ],
	# 's': [0x7D, 0x06, 0x06, 0x07, 0x80, 0xC0, 0xC1, 0x7C, ],
	# 't': [0x42, 0x3E, 0x84, 0x21, 0x08, 0x42, 0x0E, ],
	# 'u': [0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x43, 0x3D, ],
	# 'v': [0x80, 0xA0, 0x24, 0x11, 0x04, 0x22, 0x08, 0x81, 0x40, 0x70, 0x08, 0x00, ],
	# 'w': [0x82, 0x0C, 0x10, 0x51, 0x44, 0x8A, 0x24, 0x89, 0x14, 0x50, 0xA2, 0x82, 0x08, 0x10, 0x40, ],
	# 'x': [0xC3, 0x42, 0x24, 0x24, 0x18, 0x24, 0x24, 0x42, 0xC3, ],
	# 'y': [0x80, 0xA0, 0x90, 0x44, 0x22, 0x21, 0x10, 0x50, 0x28, 0x0C, 0x04, 0x02, 0x0E, 0x00, ],
	# 'z': [0xFE, 0x04, 0x10, 0x41, 0x04, 0x10, 0x40, 0xFE, ],
	# '{': [0x19, 0x08, 0x42, 0x10, 0x98, 0x21, 0x08, 0x42, 0x10, 0x60, ],
	# '|': [0xFF, 0xFF, ],
	# '}': [0xC1, 0x08, 0x42, 0x10, 0x83, 0x21, 0x08, 0x42, 0x13, 0x00]
}


OLED_TOTAL_COLUMN = 128
BITS_PER_COLUMN = 8


def main():
        tempMatrix = []
        finalDict = {}
        for bitChar, bitHex in bitmapData.items():

                # for i in range(0, len(bitHex)):
                #     for j in range(0, 7):
                #         tempMatrix.append([])

                # build a matrix representation of the character
                for index in range(0, len(bitHex)):
                        tempMatrix.append([])
                        print(hex(bitHex[index]))
                        for bitOrder in range(7, -1, -1):
                                # print(1 << bitOrder)
                                if (bitHex[index] & (1 << bitOrder)) > 0:
                                        tempMatrix[index].append(1)
                                else:
                                        tempMatrix[index].append(0)
                # print(tempMatrix)
                m = np.array(tempMatrix)
                m = np.transpose(m)
                print(np.array(tempMatrix))
                print("")
                print(m)
                m = m.tolist()
                finalDict[bitChar] = []

                # prelocate position for first run
                for i in m:
                        finalDict[bitChar].append(0)

                for currPosition, i in enumerate(m):
                        tempSum = 0
                        tempCounter = 0
                        # package the number
                        for j in i:
                                tempSum = tempSum + (j << tempCounter)
                                tempCounter += 1
                        appendCounter = 0
                        # spread the number into 8 bit packs
                        while(tempSum > 0):
                                finalDict[bitChar][currPosition + (appendCounter * OLED_TOTAL_COLUMN)] = tempSum & 0xff
                                print("Inserting ", tempSum & 0xff, "at ", currPosition + (appendCounter * OLED_TOTAL_COLUMN))
                                tempSum >>= BITS_PER_COLUMN
                                print(tempSum)
                                # pad the list if there is another one
                                if(tempSum > 0):
                                        # print(len(finalDict[bitChar]))
                                        appendCounter += 1
                                        while(len(finalDict[bitChar]) < OLED_TOTAL_COLUMN * appendCounter + currPosition + 1):
                                                # print("appending")
                                                finalDict[bitChar].append(0)

                tempMatrix = []
        print(finalDict)


if __name__ == '__main__':
	main()
